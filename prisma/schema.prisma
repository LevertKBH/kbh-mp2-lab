// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Downtime {
  id                    String    @id @unique @default(cuid())
  status                String    @default("down")
  start_date            String
  end_date              String?
  plant_category        String    @default("Plant Outage")
  plant_section         String
  discipline            String
  plant_equipment       String
  breakdown_description String
  notes                 String?
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at            DateTime? @default(now())
  updated_at            DateTime? @default(now()) @updatedAt

  @@map("downtime")
}

model DeletedDowntime {
  id                    String    @id @unique @default(cuid())
  status                String    @default("down")
  start_date            String
  end_date              String?
  plant_category        String    @default("Plant Outage")
  plant_section         String
  discipline            String
  plant_equipment       String
  breakdown_description String
  notes                 String?
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at            DateTime? @default(now())
  updated_at            DateTime? @default(now()) @updatedAt

  @@map("deleted_downtime")
}

model DeletedUser {
  id         String    @id @unique @default(cuid())
  name       String
  role       String
  identifier String
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now()) @updatedAt

  @@map("deleted_user")
}

model AuditLog {
  id          String   @id @unique @default(cuid())
  action      String
  entity_type String
  entity_id   String
  description String
  metadata    String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())

  @@map("audit_log")
}

model User {
  id              String            @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]
  members         Member[]
  invitations     Invitation[]
  auditLogs       AuditLog[]
  downtime        Downtime[]
  deletedDowntime DeletedDowntime[]
  deletedUser     DeletedUser[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}
